const pairsList = require("../model/pairsmod");

//find
async function getData(data) {
  return new Promise(async (resolve, reject) => {
    let FindData = await data.find();
    resolve(FindData);
  });
}
//findOne
async function getSingleData(collection, obj) {
  return new Promise(async (resolve, reject) => {
    let FindOneData = await collection.findOne(obj);
    resolve(FindOneData);
  });
}
//updateData
async function updateData(collection, findValue, updateValue) {
  return new Promise(async (resolve, reject) => {
    let UpdateData = await collection.updateOne(findValue, updateValue);
    resolve(UpdateData);
  });
}
//updateManyData
async function updateManyData(collection, findValue, updateValue) {
  return new Promise(async (resolve, reject) => {
    let UpdateManyData = await collection.updateMany(findValue, updateValue);
    resolve(UpdateManyData);
  });
}

//deleteData
async function deleteData(collection, deleteValue) {
  return new Promise(async (resolve, reject) => {
    let DeleteData = await collection.deleteOne(deleteValue);
    resolve(DeleteData);
  });
}

//deleteManyData
async function deleteManyData(collection, deleteValue) {
  return new Promise(async (resolve, reject) => {
    let DeleteManyData = await collection.deleteMany(deleteValue);
    resolve(DeleteManyData);
  });
}
async function findOneDeleteData(collection,findvalue, deleteValue) {
  return new Promise(async (resolve, reject) => {
    let FindOneAndRemoveData = await collection.findOneAndDelete(findvalue,deleteValue)
    resolve(FindOneAndRemoveData);
  });
}

async function testData() {
  // find
  let findDetails = await getData(pairsList);
  console.log("findDetails: ", findDetails);

  //findOne
  getOneDetailsObj = {
    fromTokenAddress: "c01",
  };
  let findOneDetails = await getSingleData(pairsList, getOneDetailsObj);

  //updateone
  let findValue = { fromTokenAddress: "c01" }
  let updateValue = { $set: { "pairAddress": "5555" } }
  let updateDetails = await updateData(pairsList, findValue, updateValue);
  console.log("updateDetails: ", updateDetails);

  //updateMany
  let findValue1 = {}
  let updateValue1 = { $set: { "newAddress": "979663333333" } }
  let updateManyDetails = await updateManyData(pairsList, findValue1, updateValue1);

  //deleteone
  // let deleteOneValue = { "newAddress": "979663333333" }
  // let delteOneDetails = await deleteData(pairsList, deleteOneValue)

  //deleteMany
  // let deleteManyValue = { "newAddress": "979663333333" }
  // let delteManyDetails = await deleteManyData(pairsList, deleteManyValue)

  let findValue3 = { fromTokenAddress: "c07" }
  let deleteValue ={ "newAddress": "979663333333" }
  let findOneDeleteDetails = await findOneDeleteData(pairsList,findValue3, deleteValue)
  console.log("findOneDeleteDetails: ", findOneDeleteDetails);


  
}

testData();




async function uniqueField(collection, values) {
  const keys = Object.keys(values);
  return new Promise(async (resolve, reject) => {
    let getUniqueField = await collection.find(values)
    if (getUniqueField.length > 0) {
      resolve(`${keys} already exit`);
    }
    else if (getUniqueField.length == 0) {
      resolve("No data found")
    }else {
      reject("Something went wrong")
    }
  });
}
  
async function data() {
  var checkField = {
    "tokenAddress": "12345",
  }
  var obj = {
    "tokenAddress": "12345",
    "tokenName": "A",
    "tokenDecimal": "18",
    "tokenSymbol": "A",
  }

  let createliquidity = await uniqueField(liquidityexp, checkField)  
  if(!createliquidity){
    let createliquiditys= await liquidityexp.create(obj)
  }else {
    console.log("No create data");
  } 
}

data()
